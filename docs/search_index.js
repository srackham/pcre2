var searchModuleIndex = ["pcre2",];
var searchIndex = ["Regex","==","str","is_nil","free","is_match","find_all","find_one","find_all_index","find_one_index","find_all_submatch","find_one_submatch","replace_all","replace_one","replace_all_fn","replace_one_fn","replace_all_submatch_fn","replace_one_submatch_fn","replace_all_extended","replace_one_extended","split_all","split_one","compile","must_compile","escape_meta",];
var searchModuleData = [["# pcre2","pcre2.html"],];
var searchData = [["pcre2","`Regex` contains the compiled regular expression. * `pattern` is the regular exp","pcre2.html#Regex","struct "],["pcre2","","pcre2.html#Regex.==","fn (Regex)"],["pcre2","`str` returns a human-readable representation of a `Regex`.","pcre2.html#Regex.str","fn (Regex)"],["pcre2","`is_nil` returns true if the `r` has not been initialized with a compiled PCRE2 ","pcre2.html#Regex.is_nil","fn (Regex)"],["pcre2","`free` disposes memory allocated to the PCRE2 compiled regex. If V's `-autofree`","pcre2.html#Regex.free","fn (Regex)"],["pcre2","`is_match` return `true` if the `subject` string contains a match for the regula","pcre2.html#Regex.is_match","fn (Regex)"],["pcre2","`find_all` returns an array containing all matched strings from the `subject` st","pcre2.html#Regex.find_all","fn (Regex)"],["pcre2","`find_one` returns the first matched string from the `subject` string. If a matc","pcre2.html#Regex.find_one","fn (Regex)"],["pcre2","`find_all_index` searches `subject` for all matches and returns an array; each e","pcre2.html#Regex.find_all_index","fn (Regex)"],["pcre2","`find_one_index` searches `subject` for the first match and returns an array of ","pcre2.html#Regex.find_one_index","fn (Regex)"],["pcre2","`find_all_submatch` searchs the `subject` string for all regular expression matc","pcre2.html#Regex.find_all_submatch","fn (Regex)"],["pcre2","`find_one_submatch` searchs the `subject` string for the first regular expressio","pcre2.html#Regex.find_one_submatch","fn (Regex)"],["pcre2","`replace_all` returns a copy of the `subject` string with all matches of the reg","pcre2.html#Regex.replace_all","fn (Regex)"],["pcre2","`replace_one` returns a copy of the `subject` string in with the first match of ","pcre2.html#Regex.replace_one","fn (Regex)"],["pcre2","`replace_all_fn` returns a copy of the `subject` string with all regular express","pcre2.html#Regex.replace_all_fn","fn (Regex)"],["pcre2","`replace_one_fn` returns a copy of the `subject` string with the first regular e","pcre2.html#Regex.replace_one_fn","fn (Regex)"],["pcre2","`replace_all_submatch_fn` returns a copy of the `subject` string with all regula","pcre2.html#Regex.replace_all_submatch_fn","fn (Regex)"],["pcre2","`replace_one_submatch_fn` returns a copy of the `subject` string with the first ","pcre2.html#Regex.replace_one_submatch_fn","fn (Regex)"],["pcre2","`replace_all_extended` returns a copy of the `subject` string with all matches o","pcre2.html#Regex.replace_all_extended","fn (Regex)"],["pcre2","`replace_one_extended` returns a copy of the `subject` string with the first mat","pcre2.html#Regex.replace_one_extended","fn (Regex)"],["pcre2","`split_all` splits the `subject` string at regular expression match boundaries a","pcre2.html#Regex.split_all","fn (Regex)"],["pcre2","`split_one` splits the `subject` string at the first regular expression match bo","pcre2.html#Regex.split_one","fn (Regex)"],["pcre2","`compile` parses a regular expression `pattern` and returns the corresponding `R","pcre2.html#compile","fn "],["pcre2","`must_compile` is like `compile` but panics if the regex `pattern` cannot be par","pcre2.html#must_compile","fn "],["pcre2","`escape_meta` returns a string that escapes all regular expression metacharacter","pcre2.html#escape_meta","fn "],];
